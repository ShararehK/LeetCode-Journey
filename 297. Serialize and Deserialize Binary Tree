Problem : https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

*****************************

Explanation :

1. Serialization (serialize method):
  *  If the root is null, return the string "null".
  *  Otherwise, recursively serialize the left and right subtrees and concatenate them with the current root value.

2. Deserialization (deserialize method):
  *  Split the input string into a queue of node values.
  *  Use a helper function (deserializeHelper) to recursively build the tree.
  *  If the queue is empty or the next value is "null", return null.
  *  Create a new TreeNode with the parsed integer value.
  *  Recursively deserialize the left and right subtrees.
  *  Return the constructed tree.

****************************

Solution :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null){
            return "null";
        }
        String left=serialize(root.left);
        String right=serialize(root.right);
        return root.val+","+left+","+right;   
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {

        Queue<String> nodes = new LinkedList<>(Arrays.asList(data.split(",")));
        return deserializeHelper(nodes);
    }
    public TreeNode deserializeHelper(Queue<String> nodes){
        if(nodes.isEmpty() || nodes.peek().equals("null")) {
            nodes.poll();
            return null;
        }
        TreeNode root=new TreeNode(Integer.parseInt(nodes.poll()));
        root.left=deserializeHelper(nodes);
        root.right =deserializeHelper(nodes);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
