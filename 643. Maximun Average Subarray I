Problem : https://leetcode.com/problems/maximum-average-subarray-i/

*****************************

Explanation :

1. Initialize Sum: Start by initializing the variable sum to 0.
2. Calculate Initial Sum: Iterate over the first k elements of the array and add each element's value to the sum.
4. Initialize Max Sum: Set maxSum to the initial value of sum. This represents the sum of the first subarray.
5. Sliding Window Technique:
  - Iterate through the array starting from index k.
  - Update sum by adding the current element and subtracting the element at the position i - k. This simulates moving the window by one element.
  - Update maxSum to be the maximum of its current value and the updated sum.
6. Calculate Average:
  - After the iteration, maxSum holds the sum of the maximum average subarray of length k.
  - Return the average by dividing maxSum by k.

*****************************

Solution : 

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum=0;
        for (int i=0;i<k;i++){
            sum+=nums[i];
        }
        double maxSum=sum;
        for (int i=k;i<nums.length;i++){
            sum+=nums[i]-nums[i-k];
            maxSum=Math.max(maxSum,sum);
        }
        
        return maxSum/k;
    }
}

