Problem :https://leetcode.com/problems/binary-tree-level-order-traversal/

*******************

Explanation : 

1. It starts with a root node of the binary tree.

2. Using a queue (like waiting in line), it processes nodes one level at a time.

3. For each level:

  *  It adds all the nodes at that level to a list (currentLevel).
  *  It records the values of these nodes in currentLevel.
  *  It adds any child nodes of the processed nodes to the queue for the next level.
  *  It repeats this process for all levels until the tree is fully traversed.

4. The result is a list of lists, where each inner list contains the values of nodes at a particular level.

5. This list of lists is the output of the function, representing the binary tree's structure in a level-by-level order.

********************

Solution :


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lst=new ArrayList();
        if (root == null) return lst;
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        while (!queue.isEmpty()){
            int size = queue.size();
            List<Integer> currentLevel=new ArrayList();
            for(int i=0; i < size ;i++){
                TreeNode cur=queue.remove();
                currentLevel.add(cur.val);
                if(cur.left!=null){
                    queue.add(cur.left);
                }
                if(cur.right!=null){
                    queue.add(cur.right);
                }
            }
            lst.add(currentLevel);
        }
        return lst;
    }
}
