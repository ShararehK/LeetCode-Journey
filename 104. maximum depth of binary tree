Problem : https://leetcode.com/problems/maximum-depth-of-binary-tree/

Explanation :

1. We're given a binary tree, which is a tree structure where each node can have at most two child nodes: a left child and a right child.

2. The binary tree nodes are defined by the TreeNode class, and each node has three properties:

  *  val represents the value stored in the node.
  *  left points to the left child node (if it exists).
  *  right points to the right child node (if it exists).
3. The maxDepth function is used to find the maximum depth of the binary tree. The depth of a tree is essentially how many levels or layers it has from the root node to the farthest leaf node.

4. Here's how it works:

  *  If the root node is null, which means the tree is empty or doesn't exist, we return a depth of 0 because there are no nodes in an empty tree.
  *  If the root node exists, we calculate the depth of the left and right subtrees.
  *  We use recursion, which means we call the maxDepth function on the left and right child nodes to calculate their depths.
  *  We then find the maximum depth between the left and right subtrees using Math.max(hLeft, hRight).
  *  Finally, we add 1 to this maximum depth to account for the current root node. The +1 signifies that we move one level down the tree.

Solution :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        int hLeft=maxDepth(root.left);
        int hRight=maxDepth(root.right);
        return Math.max(hLeft,hRight)+1;
    }
}
