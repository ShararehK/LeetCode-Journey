Problem : https://leetcode.com/problems/house-robber/

****************************

Explanation : 

1. Initialization: If there are no houses (nums.length == 0), return 0. If there's only one house (nums.length == 1), return the money in that house.

2. Dynamic Programming Array: Create an array dp to store the maximum amount of money that can be robbed up to each house.

3. Base Cases: Initialize the first two elements of dp based on the money in the first two houses:
  *  dp[0] is the money in the first house.
  *  dp[1] is the maximum of the money in the first and second houses.
    
4. Dynamic Programming Iteration: Iterate through the remaining houses starting from the third one (i = 2):

  *  For each house, calculate the maximum amount of money that can be robbed up to that house (dp[i]).
  *  The maximum is either robbing the current house and adding the money to the loot from two houses ago (dp[i-2]), or skipping the current house and sticking with the loot from the previous house (dp[i-1]).

5. Result: The final result is stored in dp[nums.length - 1], representing the maximum amount of money that can be robbed from the entire street of houses.

6. Return: Return the final result.

****************************

Solution :

class Solution {
    public int rob(int[] nums) {
        if(nums.length==0) return 0;
        if(nums.length==1) return nums[0];
        int[] dp =new int [nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i=2;i<nums.length;i++){
            dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[nums.length-1];
    }
}
