Problem : https://leetcode.com/problems/number-of-1-bits/

Explanation : 

1. Initialize a variable result to keep track of the count of set bits. Start it at 0.

2. Enter a loop that continues as long as n is not equal to 0.

3. Inside the loop, use a bitwise AND operation (n & 1) to check the rightmost bit (LSB) of n. If it's 1, increment the result by 1.

4. Perform an unsigned right shift on n using the >>> operator to examine the next bit. This operation shifts the bits to the right, filling the leftmost bits with zeros.

5. Repeat steps 3 and 4 until all bits in n have been examined.

6. Return the result, which represents the count of set bits in the unsigned integer n.

Java supports two types of right shift operators. The >> operator is a signed right shift operator and >>> is an unsigned right shift operator. The left operands value is moved right by the number of bits specified by the right operand.

n = n>>1; //for Signed right shift
n = n>>>1; //for Unsigned right shift


Solution :

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {

   //  First Method 
        // char [] charArray=Integer.toBinaryString(n).toCharArray();
        // int sum =0;
        // for (char c : charArray){
        //     if(Character.getNumericValue(c)!=0){
        //         sum+=Character.getNumericValue(c);
        //     }
            
        // }
        // return sum;

    // Second Method  
        int result=0;
        while(n!=0){
            result+=n&1;
            n=n>>>1;
        } 
        return result;
    }
}
