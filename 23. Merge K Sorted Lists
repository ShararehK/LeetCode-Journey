Problem :https://leetcode.com/problems/merge-k-sorted-lists/

******************************

Explanation :

1. Base Cases:
  If the array of lists is empty, return null.
  If there is only one list in the array, return that list.

2. Divide and Conquer:
  Divide the array of lists into two halves.
  Recursively merge the two halves until there is only one list.

3. Merge Two Lists:
  Implement a function to merge two sorted linked lists, similar to the mergeTwoLists function you've provided.

4. Merge All Lists:
  After dividing and conquering, you will have multiple lists. Use the mergeTwoLists function iteratively to merge all the lists into one.

*****************************

Solution :

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        return mergeLists(lists, 0, lists.length - 1);
    }

    private ListNode mergeLists(ListNode[] lists, int start, int end) {
        if (start == end) {
            return lists[start];
        }

        int mid = (start + end) / 2;
        ListNode left = mergeLists(lists, start, mid);
        ListNode right = mergeLists(lists, mid + 1, end);

        return mergeTwoLists(left, right);
    }

    private ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode result = new ListNode();
        ListNode curRes = result;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                curRes.next = list1;
                list1 = list1.next;
            } else {
                curRes.next = list2;
                list2 = list2.next;
            }
            curRes = curRes.next;
        }

        if (list1 == null) {
            curRes.next = list2;
        }
        if (list2 == null) {
            curRes.next = list1;
        }

        return result.next;
    }
}
