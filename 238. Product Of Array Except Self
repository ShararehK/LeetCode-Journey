Problem : https://leetcode.com/problems/product-of-array-except-self/

**************************

Explanation :

Initialization: Initialize three arrays pre, post, and res, each of length n (where n is the length of the input array nums). These arrays will store intermediate results.

Prefix Products (pre array): Calculate the product of all elements to the left of each element in the input array nums and store the results in the pre array. This step ensures that pre[i] holds the product of all elements before nums[i].

Suffix Products (post array): Calculate the product of all elements to the right of each element in the input array nums and store the results in the post array. This step ensures that post[i] holds the product of all elements after nums[i].

Final Result (res array): Calculate the final result array res by multiplying corresponding elements from the pre and post arrays. This multiplication excludes the element at the current index i, achieving the goal of the code.

Return Result: Return the final result array res.

Explanation: The approach relies on breaking down the problem into two subproblems - finding the products to the left and right of each element. By precomputing these products in the pre and post arrays, respectively, the final result can be obtained by multiplying the corresponding pre and post products, excluding the current element. This approach eliminates the need for repetitive calculations and achieves the desired result in a time-efficient manner.

****************************

Solution : 

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n=nums.length;
        int [] pre=new int[n];
        int [] post=new int [n];
        int [] res=new int[n];

        pre[0]=1;
        int prod=1;
        for(int i=1;i<n;i++){
            pre[i]=pre[i-1]*nums[i-1];
        }

        prod=1;
        post[n-1]=1;
        for(int i=n-2;i>=0;i--){
            post[i]=post[i+1]*nums[i+1];
        }
        
        for(int i=0; i<n;i++){
            res[i]=pre[i]*post[i];
        }
        return res;
    }
}
