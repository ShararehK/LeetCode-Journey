Problem : https://leetcode.com/problems/valid-sudoku/

*************************

Explanation :


1 . Check Rows:

  - For each row in the Sudoku board:
  - Create a HashSet (set) to store unique numbers encountered in the row.
  - Initialize a counter (count) to track the non-empty cells in the row.
  - Iterate through each column in the row:
  - If the cell is not empty ('.'), increment the count and add the number to the set.
  - After the row is processed, check if the count of non-empty cells is equal to the size of the set.
  - If not, return false as there are duplicate numbers in the row.

2 . Check Columns:

  - For each column in the Sudoku board:
  - Create a new HashSet (set) for unique numbers in the column.
  - Initialize the counter (count) again.
  - Iterate through each row in the column:
  - If the cell is not empty, increment the count and add the number to the set.
  - After processing the column, check for duplicates and return false if found.

3 . Check 3x3 Subgrids:

  - For each 3x3 subgrid:
  - Create a new HashSet (set) for unique numbers in the subgrid.
  - Initialize the counter (count).
  - Iterate through each cell in the 3x3 subgrid:
  - If the cell is not empty, increment the count and add the number to the set.
  - After processing the subgrid, check for duplicates and return false if found.
  - Return True: If all rows, columns, and 3x3 subgrids pass the checks without finding duplicates, return true.


***********************

Solution : 

class Solution {
    public boolean isValidSudoku(char[][] board) {
        int count;
        HashSet<Character> set;
        //check rows 
        for (int i =0;i<board.length;i++){
            set=new HashSet<>();
            count =0;
            for (int j=0;j<board[0].length;j++){
                if (board[i][j]!='.'){
                    count ++;
                    set.add(board[i][j]);
                }
            }
            if (count != set.size()){
                return false;
            }

        }
        //check columns 
        for (int j=0;j<board[0].length;j++){
            set=new HashSet<>();
            count =0;
            for (int i =0;i<board.length;i++){
                if (board[i][j]!='.'){
                    count ++;
                    set.add(board[i][j]);
                }
            }
            if (count != set.size()){
                return false;
            }

        }
        //check 3*3 
        for (int k=0;k<board.length;k+=3){
            for (int l=0;l<board.length;l+=3){
                set=new HashSet<>();
                count =0;
                for (int i =k;i<k+3;i++){
                    for (int j=l;j<l+3;j++){
                        if (board[i][j]!='.'){
                            count ++;
                            set.add(board[i][j]);
                        }
                    }
                }
                if (count != set.size()){
                    return false;
                }
            }
        }
        
        return true;
    }
}
