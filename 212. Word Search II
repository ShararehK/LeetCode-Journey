Problem :https://leetcode.com/problems/word-search-ii/

********************************

Explanation :

1. TrieNode Class:
Imagine you have a big box for each letter in the alphabet. This box is called TrieNode.
Inside each box, you have 26 smaller slots, each representing a letter of the alphabet.
Each box can also have a flag that tells you whether it marks the end of a word.

2. Trie Class:
Think of a Trie as a huge dictionary where each page is a TrieNode.
The first page of the dictionary is called root.
When you add a word to the dictionary, you turn the pages one by one, putting each letter in its corresponding slot.
If a slot is already filled, it means that the word continues from there. If not, you create a new page.
At the end of the word, you mark the last page as the end of a word.
To check if a word starts with a certain prefix, you flip through the pages, making sure each letter is in its proper slot.

3. Solution Class:
Now, imagine you're playing a word search game on a board.
You create a dictionary (Trie) and add all the words you want to find.
You explore the board, checking if the sequence of letters you're forming matches any word in the dictionary.
If it does, you add that word to your list of found words.
You use a method called Depth-First Search (dfs) to explore the board, trying out different paths.

******************************

Solution : 


class TrieNode {
    TrieNode[] children;
    boolean isEnd;

    TrieNode() {
        children = new TrieNode[26];
        isEnd = false;
    }
}

class Trie {
    TrieNode root;

    Trie() {
        root = new TrieNode();
    }

    void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (index < 0 || index >= 26) {
                // Handle out-of-bounds characters
                continue;
            }
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
        node.isEnd = true;
    }

    boolean startsWith(String prefix) {
        TrieNode node = root;
        for (char c : prefix.toCharArray()) {
            int index = c - 'a';
            if (index < 0 || index >= 26 || node.children[index] == null) {
                // Handle out-of-bounds characters and missing nodes
                return false;
            }
            node = node.children[index];
        }
        return true;
    }
}

public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        int m = board.length;
        int n = board[0].length;
        Trie trie = new Trie();

        for (String word : words) {
            trie.insert(word);
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dfs(board, i, j, trie.root, new StringBuilder(), res);
            }
        }

        return res;
    }

    private void dfs(char[][] board, int i, int j, TrieNode node, StringBuilder current, List<String> res) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {
            return;
        }

        char c = board[i][j];
        int index = c - 'a';
        if (index < 0 || index >= 26 || node.children[index] == null) {
            return;
        }

        node = node.children[index];
        current.append(c);

        if (node.isEnd) {
            res.add(current.toString());
            node.isEnd = false;  // Avoid duplicates
        }

        board[i][j] = '#'; // Mark the cell as visited

        dfs(board, i - 1, j, node, current, res);
        dfs(board, i + 1, j, node, current, res);
        dfs(board, i, j - 1, node, current, res);
        dfs(board, i, j + 1, node, current, res);

        board[i][j] = c; // Restore the original character
        current.deleteCharAt(current.length() - 1);
    }
}
