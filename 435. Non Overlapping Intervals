Problem : https://leetcode.com/problems/non-overlapping-intervals/

**************************

Explanation :

1. Sort Intervals: The code starts by sorting the given intervals based on their end times. This is done to make it easier to find non-overlapping intervals.

2. Initialize Variables: It initializes two variables, prev and count. prev keeps track of the index of the previous interval, and count keeps count of non-overlapping intervals.

3. Iterate through Intervals: The code then loops through the sorted intervals from the second interval to the last.

4. Check for Non-overlapping Intervals: For each interval, it checks if the start time of the current interval is greater than or equal to the end time of the previous interval (the one tracked by prev). If this condition is met, it means these intervals don't overlap.

5. Update Variables: If the current interval is non-overlapping, the code updates the prev to the index of the current interval and increments the count to indicate that one more non-overlapping interval has been found.

6. Calculate Result: At the end of the loop, the code returns the total number of intervals minus the count. This gives the maximum number of non-overlapping intervals.

In simple terms, the code sorts the intervals, then goes through them to count how many of them don't overlap with others, and finally returns this count as the maximum number of non-overlapping intervals.

**************************

Solution :

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int n = intervals.length;
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));

        int prev = 0;
        int count = 1;

        for (int i = 1; i < n; i++) {
            if (intervals[i][0] >= intervals[prev][1]) {
                prev = i;
                count++;
            }
        }
        return n - count;
    }
}
