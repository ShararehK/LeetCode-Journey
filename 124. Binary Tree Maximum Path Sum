Problem : https://leetcode.com/problems/binary-tree-maximum-path-sum/

**************************

Explanation :

1. helper Method:
  *  Takes a tree node as a parameter.
  *  Base case: If the node is null, returns 0.
  *  Recursively calculates the maximum path sum for the left and right subtrees.

2. Computes various sums:
  *  root_left: Sum including the current node and its left subtree.
  *  root_right: Sum including the current node and its right subtree.
  *  all: Sum including the current node, its left, and right subtrees.
  *  Updates the overall maximum sum (maxSum) with the maximum among these possibilities.
  *  Returns the maximum sum that can be obtained starting from the current node.


************************

Solution : 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        helper(root);
        return maxSum;
    }

    public int helper(TreeNode root) {
        if (root == null)
            return 0;

        int left = helper(root.left);
        int right = helper(root.right);
        int root_left = root.val + left;
        int root_right = root.val + right;
        int all = root.val + left + right;

        maxSum = Math.max(maxSum, Math.max(Math.max(root_left, root_right), Math.max(all, root.val)));

        return Math.max(Math.max(root.val + left, root.val + right), root.val);
    }
}
